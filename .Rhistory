GradeData <- read.delim("~/Documents/GradeData.txt")
View(GradeData)
list(GradeData)
list(GradeData)
dim(GradeData)
variables(GradeData)
GradeData$gender
GradeData$Gender
names(GradeData)
# The seven variables include:
names(GradeData)
names(GradeData)
names(GradeData)
names(GradeData)
head(GradeData)
table(GradeData$HW_Frequency)
table(GradeData$HW_Frequency/97)
table(GradeData$HW_Frequency)/97
summary(GradeData$Test_Average)
bargraph(table(GradeData$HW_Frequency))
barplot(table(GradeData$HW_Frequency))
boxplot(GradeData$Test_Average)
head(GradeData)
barplot(table(GradeData$HW-Frequency))
barplot(table(GradeData$HW_Frequency))
plot(GradeData$HW_Average,GradeData$Test_Average)
boxplot(GradeData$Test_Average)
subset(GradeData,Test_Average<40)
pnorm(24,mean=24,sd=5)
pnorm(24,mean=21,sd=5)
pnorm(2000,mean=1500,sd=300)
pnorm(1900,mean=1500,sd=300)
pnorm(1900,1500,300)
qnorm(10,21,5)
qnorm(10,21,5)
qnorm(90,1500,300)
qnorm(90,mean=1500,sd=300)
qnorm(.10,21,5)
summary(GradeData$Test_Average)
sd(GradeData$Test_Average)
var(GradeData$Test_Average)
table(GradeData$Test_Average<50)
table(GradeData$Test_Average<50)$TRUE
table(GradeData$Test_Average<50)[2,2]
table(GradeData$Test_Average<50)[1,2]
table(GradeData$Test_Average<50)[2]
table(GradeData$Test_Average<50)[2]-1
hist(GradeData$Test_Average,20)
hist(GradeData$Test_Average,10)
hist(GradeData$Test_Average,10)
hist(GradeData$Test_Average,10)
boxplot(GradeData$Test_Average)
boxplot(,GradeData$Test_Average)
head(GradeData)
boxplot(GradeData$Gender,GradeData$HW_Frequency)
bargraph(GradeData$Gender,GradeData$HW_Frequency)
barplot(GradeData$Gender,GradeData$HW_Frequency)
table(GradeData$Gender,GradeData$HW_Frequency)
barplot(table(GradeData$Gender,GradeData$HW_Frequency))
mosaic plot(table(GradeData$Gender,GradeData$HW_Frequency))
mosaicplot(table(GradeData$Gender,GradeData$HW_Frequency))
head(GradeData_Test_Average/table(GradeData$Test_Average<50)[2])
head(GradeData$Test_Average/table(GradeData$Test_Average<50)[2])
head(GradeData$Test_Average/table(GradeData$Test_Average<GradeData$Test_Average)[2])
tail(GradeData$Test_Average/table(GradeData$Test_Average<GradeData$Test_Average)[2])
head(GradeData$Test_Average/table(subset(GradeData$Test_Average<70))[2])
head(GradeData$Test_Average/table(subset(GradeData$Test_Average,GradeData$Test_Average<70))[2])
table(subset(GradeData$Test_Average,GradeData$Test_Average<70))[2]
table(subset(GradeData$Test_Average,GradeData$Test_Average<70))
table(subset(GradeData,GradeData$Test_Average<70))
45(.13)^8(.87)^2
45(.13^8)(.87^2)
2^2
.5^2
45(2)
45*2
45*.13^8*.87^2
45*(.13^8)*(.87^2)
sqrt(10*.56*.44)
0.4/sqrt(10*.56*.44)
dbinom(6,10,.56)
choose(10,2)*.56^2*.44^8
dbinom(2,10,.56)
qnorm(.98,0,1)
4.37/sqrt(22)
(1.96*300/25)^2
6*(30.69-32)/4.31
qnorm(-1.82,0,1)
qnorm(1.82,0,1)
pnorm(1.82,0,1)
2*pnorm(1.82,0,1)
2*pnorm(-1.82,0,1)
415-1.96*22
415+1.96*22
mosaicplot(table(GradeData$HW_Frequency,GradeData$Gender))
head(GradeData)
plot(GradeData$HW_Average,GradeData$Test_Average)
head(GradeData)
plot(GradeData$HW_Average,GradeData$Test_Average)
barplot(table(GradeData$HW_Frequency,GradeData$Gender))
mosaicplot(table(GradeData$HW_Frequency,GradeData$Gender))
# My data set, called "GradeData", is loaded.
# My data set, called "GradeData", is loaded.
# My data set, called "GradeData", is loaded.
# The data contains information of the following dimensions:
source('~/Documents/CourseraProject.R')
pnorm(1630,1500,300)
summary(GradeData)
mosaicplot(table(GradeData$HW_Frequency))
mosaicplot(table(GradeData$HW_Frequency,GradeData$Test_Average))
plot(GradeData$HW_Average,GradeData$Test_Average)
hist(GradeData$Test_Average)
boxplot(GradeData$Test_Average~GradeData$HW_Frequency)
table(GradeData$HW_Frequency,GradeData$Test_Average)
table(GradeData$HW_Frequency)
table(GradeData$HW_Frequency~GradeData$Average)
table(GradeData$HW_Frequency,GradeData$Average)
table(GradeData$HW_Frequency~GradeData$Test_Average)
table(GradeData$HW_Frequency,GradeData$Test_Average)
# My data set, called "GradeData", is loaded.
Test_Performance=rep(NA,97)
for (i in 1:97) {}
for (i in 1:97){Test_Performance[i]="High"if GradeData$Test_Average>85, "Low" if GradeData$Test_Average<85}
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/inference.Rdata"))
head(GradeData)
inference(GradeData$Test_Average, type = "ci", method = "simulation", conflevel = 0.9, est = "mean",
boot_method = "perc")
inference(y = GradeData$Test_Average, x = GradeData$Gender, est = "mean", type = "ht", null = 0,alternative = "twosided", method = "theoretical")
head(GradeData)
boxplot(GradeData$Test_Average~GradeData$Grade)
length(subset(GradeData,Grade==10))
length(subset(GradeData,Grade==9))
length(subset(GradeData,Grade=9))
length(subset(GradeData,Grade=11))
Sophomore=subset(GradeData,Grade==10)
length(Sophomore#ID.)
length(Sophomore#ID.)
length(Sophomore#ID)
length(Sophomore$ID.)
length(Sophomore$ID)
Freshman=subset(GradeData,Grade==9)
length(Freshman$ID)
Junior=subset(GradeData,Grade==11)
length(Junior$ID)
boxplot(GradeData$HW_Average~GradeData$Grade)
boxplot((GradeData$Test_Average-GradeData$HW_Average)~GradeData$Grade)
names(GSS)
swirl()
library(swirl)
ls()
rm(list-ls())
rm(list=ls())
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
play()
dir()
nxt()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create(testdir)
?dir.create
testdir <- dir.create()
dir.create(~/testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename(mytest.R, mytest2.R)
list.files()
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest.R")
file.path("mytest3.R")
file.path(folder1, folder2, "mytest3.R")
file.path("mytest3.R", folder1, folder2)
args(file.path)
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
library(swirl)
swirl()
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5, 10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with - my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, time - 40)
rep(0, time = 40)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10)
num_vect <- c(0.5, 55, -10, 6)
tg <- (num_vect < 1)
tg <- num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "your_name_here")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world", sep=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
source('~/datasciencecoursera/R_Programming/pollutantmean.R')
getwd()
setwd(~/datascience/coursera/R_Programming/ProgrammingAssignment2)
setwd("~/datascience/coursera/R_Programming/ProgrammingAssignment2")
setwd("~/datasciencecoursera/R_Programming/ProgrammingAssignment2")
getwd()
ls()
x <- matrix(1:6, nrow = 2, ncol = 3)
x
x <- matrix(1:9, nrow = 3, ncol = 3)
y <- matrix( , nrow = 3, ncol = 3)
y
z <- NULL
setm <- function(matr) z <<- matr
setm(x)
z
setm(y)
z
setm(matrix(3:6, nrow = 2, ncol = 2))
z
}
source('~/.active-rstudio-document')
simone <- makeVector(NULL)
simone$getmean()
simone$set(matri(1:9, nrow = 3, ncol = 3))
simone$set(matrix(1:9, nrow = 3, ncol = 3))
simone$setmean (1)
cachemean(simone)
simone$setmean (NULL)
cachemean(simone)
cachemean(simone)
source('~/datasciencecoursera/R_Programming/ProgrammingAssignment2/cachematrix.R')
c([4,2],[7,6)
c([4,2],[7,6])
matrix([4,2,7,6], 2,2)
matrix(c(4,2,7,6), 2,2)
mat <- matrix(c(4,2,7,6), 2,2)
makeCacheMatrix(mat)
x <- makeCacheMatrix(mat)
cacheSolve(x)
cacheSolve(x)
mat2 <- makeCacheMatrix(c(1,0,0,0,1,0,0,0,1),3,3)
mat2 <- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,1),3,3))
mat2$get
mat2$get()
cacheSolve(mat2)
cacheSolve(mat2)
source('~/datasciencecoursera/R_Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/R_Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/R_Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/R_Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/R_Programming/ProgrammingAssignment2/cachematrix.R')
